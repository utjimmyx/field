{
  "hash": "be9415e300ebf6e23daa574777877daf",
  "result": {
    "markdown": "---\ntitle: \"Scraping Yahoo Finance Data & Conducting Time Series Analysis with R (R Studio) - A Meetup event I organized in 2023\"\nauthor: \"Jimmy Xu\"\ndate: \"2022-10-25\"\ncategories: [news, code, analysis]\nimage: \"image.jpg\"\n---\n\n\nIn today’s fast-paced and data-driven world, it’s crucial for businesses and individuals to make informed decisions based on reliable and up-to-date information. One way to obtain such information is by web scraping financial data from sources like Yahoo Finance and Google Trends, and conducting time series analysis to reveal insights and patterns that could be useful for decision-making.\n\nIn this tutorial, we will explore the process of scraping financial data from Yahoo Finance and Google Trends using R and R Studio. We will begin by discussing the importance of web scraping in financial analysis and how it can be used to extract relevant data from the web. We will then move on to the specifics of scraping Yahoo Finance and Google Trends data and discuss the steps involved in presenting the results using plots.\n\nWe will walk through a step-by-step approach, starting with the installation of the necessary R packages and libraries required for web scraping and data visualization. Next, we will demonstrate how to extract data from Yahoo Finance and Google Trends using R and R Studio, and how to clean, format and process the extracted data to present the results.\n\nThe quantmod package in R is a powerful tool for financial quantitative modeling and analysis. Here are some short syntax examples to get you started:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quantmod)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: xts\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: zoo\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'zoo'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: TTR\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n```\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'lubridate'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n\n```{.r .cell-code}\ngetSymbols('AMZN', src = 'yahoo', \n           from = Sys.Date() - years(4), to = Sys.Date())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"AMZN\"\n```\n:::\n\n```{.r .cell-code}\ngetSymbols('TSLA', src = 'yahoo', \n           from = Sys.Date() - years(4), to = Sys.Date())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"TSLA\"\n```\n:::\n\n```{.r .cell-code}\nstocks <- as.xts(data.frame(AMZN = AMZN$\"AMZN.Close\",\n                            TSLA = TSLA$\"TSLA.Close\"))\n\nplot(as.zoo(stocks),screens = 1,lty = c(1,3),\n     col = c(\"red\",\"blue\") ,xlab = \"date\",ylab = \"Price\")\nlegend(\"top\",c(\"AMZN\",\"TSLA\"),\n       lty = c(1,3),col = c(\"red\",\"blue\"),cex = 0.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\nThese are just basic examples. The quantmod package offers a wide range of functions for financial modeling, technical analysis, and strategy development. Explore the documentation for more advanced usage.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}